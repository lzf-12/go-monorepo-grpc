syntax = "proto3";

package pb_schemas.inventory.v1;

import "google/protobuf/timestamp.proto";

option go_package = "ops-monorepo/protogen/go/inventory/v1;inventoryv1";

// Inventory Item Definition
message InventoryItem {
  string sku = 1;
  double req_qty_per_uom = 2;
  string uom = 3;
}

// Inventory Status for a single item
message InventoryStatus {
  string sku = 1;
  double requested_quantity = 2;
  double available_quantity = 3;
  double reserved_quantity = 4;
  double total_quantity = 5;
  string sku_uom = 6;
  double sku_price = 7;
  string sku_currency = 8;
}

message ReservedItem {
  string id = 1;
  string order_id = 2;

}

// Request to check inventory
message StandardInventoryRequest {
  string order_id = 1;
  repeated InventoryItem items = 2;
}

// Successful response
message InventoryStatusResponse {
  repeated InventoryStatus items = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message InventoryReservationResponse {
  string order_id = 1;
  SuccessProcessedItems success_processed_items = 2;
  FailedProcessedItems failed_processed_items = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message ReservationHistory {
    string id = 1;
    string order_id = 2;
    string sku = 3;
    double quantity = 4;
    string uom = 5;
    string status = 6;
    google.protobuf.Timestamp reserved_at = 7;
    google.protobuf.Timestamp released_at = 8;
}

message SuccessProcessedItems {
  repeated ReservationHistory items = 1;
}

message FailedProcessedItems {
  repeated InventoryStatus items = 1;
}

message ErrorDetails {
  ErrorCode error_code = 1;
  string error_message = 2;
}
enum ErrorCode {
  UNDEFINED = 0;
  SKU_NOT_FOUND = 1;
	SKU_UOM_PAIR_NOT_MATCH = 2;
  DB_UNAVAILABLE = 3;
  DB_ERROR_TRANSACTION = 4;
  INTERNAL_ERROR = 5;
  INSUFFICIENT_QUANTITY_TO_RESERVE = 6;
  INSUFFICIENT_QUANTITY_TO_RELEASE = 7;
}

// Inventory Service
service InventoryService {
  rpc CheckStock (StandardInventoryRequest) returns (InventoryStatusResponse) {};
  rpc ReserveStock (StandardInventoryRequest) returns (InventoryReservationResponse) {};
  rpc ReleaseStock (StandardInventoryRequest) returns (InventoryReservationResponse) {};
}