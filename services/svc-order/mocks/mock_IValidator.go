// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"ops-monorepo/services/svc-order/internal/delivery/types"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIValidator creates a new instance of MockIValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIValidator {
	mock := &MockIValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIValidator is an autogenerated mock type for the IValidator type
type MockIValidator struct {
	mock.Mock
}

type MockIValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIValidator) EXPECT() *MockIValidator_Expecter {
	return &MockIValidator_Expecter{mock: &_m.Mock}
}

// ValidateOrderItems provides a mock function for the type MockIValidator
func (_mock *MockIValidator) ValidateOrderItems(items []types.StockItemRequest) ([]map[string]interface{}, error) {
	ret := _mock.Called(items)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOrderItems")
	}

	var r0 []map[string]interface{}
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]types.StockItemRequest) ([]map[string]interface{}, error)); ok {
		return returnFunc(items)
	}
	if returnFunc, ok := ret.Get(0).(func([]types.StockItemRequest) []map[string]interface{}); ok {
		r0 = returnFunc(items)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]types.StockItemRequest) error); ok {
		r1 = returnFunc(items)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIValidator_ValidateOrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOrderItems'
type MockIValidator_ValidateOrderItems_Call struct {
	*mock.Call
}

// ValidateOrderItems is a helper method to define mock.On call
//   - items []types.StockItemRequest
func (_e *MockIValidator_Expecter) ValidateOrderItems(items interface{}) *MockIValidator_ValidateOrderItems_Call {
	return &MockIValidator_ValidateOrderItems_Call{Call: _e.mock.On("ValidateOrderItems", items)}
}

func (_c *MockIValidator_ValidateOrderItems_Call) Run(run func(items []types.StockItemRequest)) *MockIValidator_ValidateOrderItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []types.StockItemRequest
		if args[0] != nil {
			arg0 = args[0].([]types.StockItemRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIValidator_ValidateOrderItems_Call) Return(stringToIfaceVals []map[string]interface{}, err error) *MockIValidator_ValidateOrderItems_Call {
	_c.Call.Return(stringToIfaceVals, err)
	return _c
}

func (_c *MockIValidator_ValidateOrderItems_Call) RunAndReturn(run func(items []types.StockItemRequest) ([]map[string]interface{}, error)) *MockIValidator_ValidateOrderItems_Call {
	_c.Call.Return(run)
	return _c
}
