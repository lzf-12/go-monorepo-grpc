// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"ops-monorepo/services/svc-order/internal/delivery/types"
	"ops-monorepo/services/svc-order/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIOrderUsecase creates a new instance of MockIOrderUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrderUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrderUsecase {
	mock := &MockIOrderUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOrderUsecase is an autogenerated mock type for the IOrderUsecase type
type MockIOrderUsecase struct {
	mock.Mock
}

type MockIOrderUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrderUsecase) EXPECT() *MockIOrderUsecase_Expecter {
	return &MockIOrderUsecase_Expecter{mock: &_m.Mock}
}

// NewOrder provides a mock function for the type MockIOrderUsecase
func (_mock *MockIOrderUsecase) NewOrder(ctx context.Context, request types.OrderRequest) (*model.OrderWithItems, []*model.OrderedItemStockStatus, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for NewOrder")
	}

	var r0 *model.OrderWithItems
	var r1 []*model.OrderedItemStockStatus
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.OrderRequest) (*model.OrderWithItems, []*model.OrderedItemStockStatus, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.OrderRequest) *model.OrderWithItems); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderWithItems)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.OrderRequest) []*model.OrderedItemStockStatus); ok {
		r1 = returnFunc(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.OrderedItemStockStatus)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, types.OrderRequest) error); ok {
		r2 = returnFunc(ctx, request)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIOrderUsecase_NewOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewOrder'
type MockIOrderUsecase_NewOrder_Call struct {
	*mock.Call
}

// NewOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - request types.OrderRequest
func (_e *MockIOrderUsecase_Expecter) NewOrder(ctx interface{}, request interface{}) *MockIOrderUsecase_NewOrder_Call {
	return &MockIOrderUsecase_NewOrder_Call{Call: _e.mock.On("NewOrder", ctx, request)}
}

func (_c *MockIOrderUsecase_NewOrder_Call) Run(run func(ctx context.Context, request types.OrderRequest)) *MockIOrderUsecase_NewOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.OrderRequest
		if args[1] != nil {
			arg1 = args[1].(types.OrderRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrderUsecase_NewOrder_Call) Return(orderWithItems *model.OrderWithItems, vs []*model.OrderedItemStockStatus, err error) *MockIOrderUsecase_NewOrder_Call {
	_c.Call.Return(orderWithItems, vs, err)
	return _c
}

func (_c *MockIOrderUsecase_NewOrder_Call) RunAndReturn(run func(ctx context.Context, request types.OrderRequest) (*model.OrderWithItems, []*model.OrderedItemStockStatus, error)) *MockIOrderUsecase_NewOrder_Call {
	_c.Call.Return(run)
	return _c
}
