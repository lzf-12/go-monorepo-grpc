// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"ops-monorepo/services/svc-order/internal/model"
	"ops-monorepo/shared-libs/storage/postgres"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIOrderSQLRepository creates a new instance of MockIOrderSQLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIOrderSQLRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIOrderSQLRepository {
	mock := &MockIOrderSQLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIOrderSQLRepository is an autogenerated mock type for the IOrderSQLRepository type
type MockIOrderSQLRepository struct {
	mock.Mock
}

type MockIOrderSQLRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIOrderSQLRepository) EXPECT() *MockIOrderSQLRepository_Expecter {
	return &MockIOrderSQLRepository_Expecter{mock: &_m.Mock}
}

// BeginTransaction provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) BeginTransaction(ctx context.Context) (storage.PgxTx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 storage.PgxTx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (storage.PgxTx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) storage.PgxTx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.PgxTx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOrderSQLRepository_BeginTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTransaction'
type MockIOrderSQLRepository_BeginTransaction_Call struct {
	*mock.Call
}

// BeginTransaction is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIOrderSQLRepository_Expecter) BeginTransaction(ctx interface{}) *MockIOrderSQLRepository_BeginTransaction_Call {
	return &MockIOrderSQLRepository_BeginTransaction_Call{Call: _e.mock.On("BeginTransaction", ctx)}
}

func (_c *MockIOrderSQLRepository_BeginTransaction_Call) Run(run func(ctx context.Context)) *MockIOrderSQLRepository_BeginTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_BeginTransaction_Call) Return(v storage.PgxTx, err error) *MockIOrderSQLRepository_BeginTransaction_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockIOrderSQLRepository_BeginTransaction_Call) RunAndReturn(run func(ctx context.Context) (storage.PgxTx, error)) *MockIOrderSQLRepository_BeginTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CommitTransaction provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) CommitTransaction(ctx context.Context, tx storage.PgxTx) error {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx) error); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_CommitTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitTransaction'
type MockIOrderSQLRepository_CommitTransaction_Call struct {
	*mock.Call
}

// CommitTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
func (_e *MockIOrderSQLRepository_Expecter) CommitTransaction(ctx interface{}, tx interface{}) *MockIOrderSQLRepository_CommitTransaction_Call {
	return &MockIOrderSQLRepository_CommitTransaction_Call{Call: _e.mock.On("CommitTransaction", ctx, tx)}
}

func (_c *MockIOrderSQLRepository_CommitTransaction_Call) Run(run func(ctx context.Context, tx storage.PgxTx)) *MockIOrderSQLRepository_CommitTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_CommitTransaction_Call) Return(err error) *MockIOrderSQLRepository_CommitTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_CommitTransaction_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx) error) *MockIOrderSQLRepository_CommitTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderById provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) GetOrderById(ctx context.Context, orderId uuid.UUID) (*model.Order, error) {
	ret := _mock.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 *model.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Order, error)); ok {
		return returnFunc(ctx, orderId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Order); ok {
		r0 = returnFunc(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOrderSQLRepository_GetOrderById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderById'
type MockIOrderSQLRepository_GetOrderById_Call struct {
	*mock.Call
}

// GetOrderById is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
func (_e *MockIOrderSQLRepository_Expecter) GetOrderById(ctx interface{}, orderId interface{}) *MockIOrderSQLRepository_GetOrderById_Call {
	return &MockIOrderSQLRepository_GetOrderById_Call{Call: _e.mock.On("GetOrderById", ctx, orderId)}
}

func (_c *MockIOrderSQLRepository_GetOrderById_Call) Run(run func(ctx context.Context, orderId uuid.UUID)) *MockIOrderSQLRepository_GetOrderById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_GetOrderById_Call) Return(order *model.Order, err error) *MockIOrderSQLRepository_GetOrderById_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockIOrderSQLRepository_GetOrderById_Call) RunAndReturn(run func(ctx context.Context, orderId uuid.UUID) (*model.Order, error)) *MockIOrderSQLRepository_GetOrderById_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderItemsByOrderId provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) GetOrderItemsByOrderId(ctx context.Context, orderId uuid.UUID) ([]model.ItemOrder, error) {
	ret := _mock.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderItemsByOrderId")
	}

	var r0 []model.ItemOrder
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]model.ItemOrder, error)); ok {
		return returnFunc(ctx, orderId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []model.ItemOrder); ok {
		r0 = returnFunc(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ItemOrder)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIOrderSQLRepository_GetOrderItemsByOrderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderItemsByOrderId'
type MockIOrderSQLRepository_GetOrderItemsByOrderId_Call struct {
	*mock.Call
}

// GetOrderItemsByOrderId is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
func (_e *MockIOrderSQLRepository_Expecter) GetOrderItemsByOrderId(ctx interface{}, orderId interface{}) *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call {
	return &MockIOrderSQLRepository_GetOrderItemsByOrderId_Call{Call: _e.mock.On("GetOrderItemsByOrderId", ctx, orderId)}
}

func (_c *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call) Run(run func(ctx context.Context, orderId uuid.UUID)) *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call) Return(itemOrders []model.ItemOrder, err error) *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call {
	_c.Call.Return(itemOrders, err)
	return _c
}

func (_c *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call) RunAndReturn(run func(ctx context.Context, orderId uuid.UUID) ([]model.ItemOrder, error)) *MockIOrderSQLRepository_GetOrderItemsByOrderId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderWithItems provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) GetOrderWithItems(ctx context.Context, orderId uuid.UUID) (*model.Order, []model.ItemOrder, error) {
	ret := _mock.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderWithItems")
	}

	var r0 *model.Order
	var r1 []model.ItemOrder
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Order, []model.ItemOrder, error)); ok {
		return returnFunc(ctx, orderId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Order); ok {
		r0 = returnFunc(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) []model.ItemOrder); ok {
		r1 = returnFunc(ctx, orderId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.ItemOrder)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, uuid.UUID) error); ok {
		r2 = returnFunc(ctx, orderId)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIOrderSQLRepository_GetOrderWithItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderWithItems'
type MockIOrderSQLRepository_GetOrderWithItems_Call struct {
	*mock.Call
}

// GetOrderWithItems is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
func (_e *MockIOrderSQLRepository_Expecter) GetOrderWithItems(ctx interface{}, orderId interface{}) *MockIOrderSQLRepository_GetOrderWithItems_Call {
	return &MockIOrderSQLRepository_GetOrderWithItems_Call{Call: _e.mock.On("GetOrderWithItems", ctx, orderId)}
}

func (_c *MockIOrderSQLRepository_GetOrderWithItems_Call) Run(run func(ctx context.Context, orderId uuid.UUID)) *MockIOrderSQLRepository_GetOrderWithItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_GetOrderWithItems_Call) Return(order *model.Order, itemOrders []model.ItemOrder, err error) *MockIOrderSQLRepository_GetOrderWithItems_Call {
	_c.Call.Return(order, itemOrders, err)
	return _c
}

func (_c *MockIOrderSQLRepository_GetOrderWithItems_Call) RunAndReturn(run func(ctx context.Context, orderId uuid.UUID) (*model.Order, []model.ItemOrder, error)) *MockIOrderSQLRepository_GetOrderWithItems_Call {
	_c.Call.Return(run)
	return _c
}

// InsertItemOrderWithTx provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) InsertItemOrderWithTx(ctx context.Context, tx storage.PgxTx, itemOrder model.ItemOrder) error {
	ret := _mock.Called(ctx, tx, itemOrder)

	if len(ret) == 0 {
		panic("no return value specified for InsertItemOrderWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx, model.ItemOrder) error); ok {
		r0 = returnFunc(ctx, tx, itemOrder)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_InsertItemOrderWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertItemOrderWithTx'
type MockIOrderSQLRepository_InsertItemOrderWithTx_Call struct {
	*mock.Call
}

// InsertItemOrderWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
//   - itemOrder model.ItemOrder
func (_e *MockIOrderSQLRepository_Expecter) InsertItemOrderWithTx(ctx interface{}, tx interface{}, itemOrder interface{}) *MockIOrderSQLRepository_InsertItemOrderWithTx_Call {
	return &MockIOrderSQLRepository_InsertItemOrderWithTx_Call{Call: _e.mock.On("InsertItemOrderWithTx", ctx, tx, itemOrder)}
}

func (_c *MockIOrderSQLRepository_InsertItemOrderWithTx_Call) Run(run func(ctx context.Context, tx storage.PgxTx, itemOrder model.ItemOrder)) *MockIOrderSQLRepository_InsertItemOrderWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		var arg2 model.ItemOrder
		if args[2] != nil {
			arg2 = args[2].(model.ItemOrder)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_InsertItemOrderWithTx_Call) Return(err error) *MockIOrderSQLRepository_InsertItemOrderWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_InsertItemOrderWithTx_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx, itemOrder model.ItemOrder) error) *MockIOrderSQLRepository_InsertItemOrderWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOrderWithItems provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) InsertOrderWithItems(ctx context.Context, order *model.Order, items []model.ItemOrder) error {
	ret := _mock.Called(ctx, order, items)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderWithItems")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Order, []model.ItemOrder) error); ok {
		r0 = returnFunc(ctx, order, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_InsertOrderWithItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOrderWithItems'
type MockIOrderSQLRepository_InsertOrderWithItems_Call struct {
	*mock.Call
}

// InsertOrderWithItems is a helper method to define mock.On call
//   - ctx context.Context
//   - order *model.Order
//   - items []model.ItemOrder
func (_e *MockIOrderSQLRepository_Expecter) InsertOrderWithItems(ctx interface{}, order interface{}, items interface{}) *MockIOrderSQLRepository_InsertOrderWithItems_Call {
	return &MockIOrderSQLRepository_InsertOrderWithItems_Call{Call: _e.mock.On("InsertOrderWithItems", ctx, order, items)}
}

func (_c *MockIOrderSQLRepository_InsertOrderWithItems_Call) Run(run func(ctx context.Context, order *model.Order, items []model.ItemOrder)) *MockIOrderSQLRepository_InsertOrderWithItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Order
		if args[1] != nil {
			arg1 = args[1].(*model.Order)
		}
		var arg2 []model.ItemOrder
		if args[2] != nil {
			arg2 = args[2].([]model.ItemOrder)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_InsertOrderWithItems_Call) Return(err error) *MockIOrderSQLRepository_InsertOrderWithItems_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_InsertOrderWithItems_Call) RunAndReturn(run func(ctx context.Context, order *model.Order, items []model.ItemOrder) error) *MockIOrderSQLRepository_InsertOrderWithItems_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOrderWithTx provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) InsertOrderWithTx(ctx context.Context, tx storage.PgxTx, order *model.Order) error {
	ret := _mock.Called(ctx, tx, order)

	if len(ret) == 0 {
		panic("no return value specified for InsertOrderWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx, *model.Order) error); ok {
		r0 = returnFunc(ctx, tx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_InsertOrderWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOrderWithTx'
type MockIOrderSQLRepository_InsertOrderWithTx_Call struct {
	*mock.Call
}

// InsertOrderWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
//   - order *model.Order
func (_e *MockIOrderSQLRepository_Expecter) InsertOrderWithTx(ctx interface{}, tx interface{}, order interface{}) *MockIOrderSQLRepository_InsertOrderWithTx_Call {
	return &MockIOrderSQLRepository_InsertOrderWithTx_Call{Call: _e.mock.On("InsertOrderWithTx", ctx, tx, order)}
}

func (_c *MockIOrderSQLRepository_InsertOrderWithTx_Call) Run(run func(ctx context.Context, tx storage.PgxTx, order *model.Order)) *MockIOrderSQLRepository_InsertOrderWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		var arg2 *model.Order
		if args[2] != nil {
			arg2 = args[2].(*model.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_InsertOrderWithTx_Call) Return(err error) *MockIOrderSQLRepository_InsertOrderWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_InsertOrderWithTx_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx, order *model.Order) error) *MockIOrderSQLRepository_InsertOrderWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// RollbackTransaction provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) RollbackTransaction(ctx context.Context, tx storage.PgxTx) error {
	ret := _mock.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx) error); ok {
		r0 = returnFunc(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_RollbackTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RollbackTransaction'
type MockIOrderSQLRepository_RollbackTransaction_Call struct {
	*mock.Call
}

// RollbackTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
func (_e *MockIOrderSQLRepository_Expecter) RollbackTransaction(ctx interface{}, tx interface{}) *MockIOrderSQLRepository_RollbackTransaction_Call {
	return &MockIOrderSQLRepository_RollbackTransaction_Call{Call: _e.mock.On("RollbackTransaction", ctx, tx)}
}

func (_c *MockIOrderSQLRepository_RollbackTransaction_Call) Run(run func(ctx context.Context, tx storage.PgxTx)) *MockIOrderSQLRepository_RollbackTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_RollbackTransaction_Call) Return(err error) *MockIOrderSQLRepository_RollbackTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_RollbackTransaction_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx) error) *MockIOrderSQLRepository_RollbackTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItemOrderWithTx provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) UpdateItemOrderWithTx(ctx context.Context, tx storage.PgxTx, itemOrder model.ItemOrder) error {
	ret := _mock.Called(ctx, tx, itemOrder)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItemOrderWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx, model.ItemOrder) error); ok {
		r0 = returnFunc(ctx, tx, itemOrder)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_UpdateItemOrderWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItemOrderWithTx'
type MockIOrderSQLRepository_UpdateItemOrderWithTx_Call struct {
	*mock.Call
}

// UpdateItemOrderWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
//   - itemOrder model.ItemOrder
func (_e *MockIOrderSQLRepository_Expecter) UpdateItemOrderWithTx(ctx interface{}, tx interface{}, itemOrder interface{}) *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call {
	return &MockIOrderSQLRepository_UpdateItemOrderWithTx_Call{Call: _e.mock.On("UpdateItemOrderWithTx", ctx, tx, itemOrder)}
}

func (_c *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call) Run(run func(ctx context.Context, tx storage.PgxTx, itemOrder model.ItemOrder)) *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		var arg2 model.ItemOrder
		if args[2] != nil {
			arg2 = args[2].(model.ItemOrder)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call) Return(err error) *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx, itemOrder model.ItemOrder) error) *MockIOrderSQLRepository_UpdateItemOrderWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) UpdateOrderStatus(ctx context.Context, orderId uuid.UUID, status string) error {
	ret := _mock.Called(ctx, orderId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, orderId, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockIOrderSQLRepository_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
//   - status string
func (_e *MockIOrderSQLRepository_Expecter) UpdateOrderStatus(ctx interface{}, orderId interface{}, status interface{}) *MockIOrderSQLRepository_UpdateOrderStatus_Call {
	return &MockIOrderSQLRepository_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", ctx, orderId, status)}
}

func (_c *MockIOrderSQLRepository_UpdateOrderStatus_Call) Run(run func(ctx context.Context, orderId uuid.UUID, status string)) *MockIOrderSQLRepository_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateOrderStatus_Call) Return(err error) *MockIOrderSQLRepository_UpdateOrderStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateOrderStatus_Call) RunAndReturn(run func(ctx context.Context, orderId uuid.UUID, status string) error) *MockIOrderSQLRepository_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatusWithTx provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) UpdateOrderStatusWithTx(ctx context.Context, tx storage.PgxTx, orderId uuid.UUID, status string) error {
	ret := _mock.Called(ctx, tx, orderId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatusWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx, uuid.UUID, string) error); ok {
		r0 = returnFunc(ctx, tx, orderId, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatusWithTx'
type MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call struct {
	*mock.Call
}

// UpdateOrderStatusWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
//   - orderId uuid.UUID
//   - status string
func (_e *MockIOrderSQLRepository_Expecter) UpdateOrderStatusWithTx(ctx interface{}, tx interface{}, orderId interface{}, status interface{}) *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call {
	return &MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call{Call: _e.mock.On("UpdateOrderStatusWithTx", ctx, tx, orderId, status)}
}

func (_c *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call) Run(run func(ctx context.Context, tx storage.PgxTx, orderId uuid.UUID, status string)) *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call) Return(err error) *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx, orderId uuid.UUID, status string) error) *MockIOrderSQLRepository_UpdateOrderStatusWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderWithTx provides a mock function for the type MockIOrderSQLRepository
func (_mock *MockIOrderSQLRepository) UpdateOrderWithTx(ctx context.Context, tx storage.PgxTx, order *model.Order) error {
	ret := _mock.Called(ctx, tx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderWithTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.PgxTx, *model.Order) error); ok {
		r0 = returnFunc(ctx, tx, order)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIOrderSQLRepository_UpdateOrderWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderWithTx'
type MockIOrderSQLRepository_UpdateOrderWithTx_Call struct {
	*mock.Call
}

// UpdateOrderWithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - tx storage.PgxTx
//   - order *model.Order
func (_e *MockIOrderSQLRepository_Expecter) UpdateOrderWithTx(ctx interface{}, tx interface{}, order interface{}) *MockIOrderSQLRepository_UpdateOrderWithTx_Call {
	return &MockIOrderSQLRepository_UpdateOrderWithTx_Call{Call: _e.mock.On("UpdateOrderWithTx", ctx, tx, order)}
}

func (_c *MockIOrderSQLRepository_UpdateOrderWithTx_Call) Run(run func(ctx context.Context, tx storage.PgxTx, order *model.Order)) *MockIOrderSQLRepository_UpdateOrderWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 storage.PgxTx
		if args[1] != nil {
			arg1 = args[1].(storage.PgxTx)
		}
		var arg2 *model.Order
		if args[2] != nil {
			arg2 = args[2].(*model.Order)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateOrderWithTx_Call) Return(err error) *MockIOrderSQLRepository_UpdateOrderWithTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIOrderSQLRepository_UpdateOrderWithTx_Call) RunAndReturn(run func(ctx context.Context, tx storage.PgxTx, order *model.Order) error) *MockIOrderSQLRepository_UpdateOrderWithTx_Call {
	_c.Call.Return(run)
	return _c
}
