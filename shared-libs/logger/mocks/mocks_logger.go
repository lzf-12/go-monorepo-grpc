// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package logger

import (
	"context"
	"ops-monorepo/shared-libs/logger"

	mock "github.com/stretchr/testify/mock"
)

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(msg string, fields ...map[string]interface{}) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - fields ...map[string]interface{}
func (_e *MockLogger_Expecter) Debug(msg interface{}, fields ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(msg string, fields ...map[string]interface{})) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []map[string]interface{}
		var variadicArgs []map[string]interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]map[string]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(msg string, fields ...map[string]interface{})) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function for the type MockLogger
func (_mock *MockLogger) Debugf(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type MockLogger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Debugf(format interface{}, args ...interface{}) *MockLogger_Debugf_Call {
	return &MockLogger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Debugf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Debugf_Call) Return() *MockLogger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debugf_Call) RunAndReturn(run func(format string, args ...interface{})) *MockLogger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(msg string, fields ...map[string]interface{}) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - fields ...map[string]interface{}
func (_e *MockLogger_Expecter) Error(msg interface{}, fields ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(msg string, fields ...map[string]interface{})) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []map[string]interface{}
		var variadicArgs []map[string]interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]map[string]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(msg string, fields ...map[string]interface{})) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Errorf provides a mock function for the type MockLogger
func (_mock *MockLogger) Errorf(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Errorf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errorf'
type MockLogger_Errorf_Call struct {
	*mock.Call
}

// Errorf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Errorf(format interface{}, args ...interface{}) *MockLogger_Errorf_Call {
	return &MockLogger_Errorf_Call{Call: _e.mock.On("Errorf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Errorf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Errorf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Errorf_Call) Return() *MockLogger_Errorf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Errorf_Call) RunAndReturn(run func(format string, args ...interface{})) *MockLogger_Errorf_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function for the type MockLogger
func (_mock *MockLogger) Fatal(msg string, fields ...map[string]interface{}) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockLogger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - msg string
//   - fields ...map[string]interface{}
func (_e *MockLogger_Expecter) Fatal(msg interface{}, fields ...interface{}) *MockLogger_Fatal_Call {
	return &MockLogger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockLogger_Fatal_Call) Run(run func(msg string, fields ...map[string]interface{})) *MockLogger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []map[string]interface{}
		var variadicArgs []map[string]interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]map[string]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Fatal_Call) Return() *MockLogger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatal_Call) RunAndReturn(run func(msg string, fields ...map[string]interface{})) *MockLogger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Fatalf provides a mock function for the type MockLogger
func (_mock *MockLogger) Fatalf(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Fatalf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatalf'
type MockLogger_Fatalf_Call struct {
	*mock.Call
}

// Fatalf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Fatalf(format interface{}, args ...interface{}) *MockLogger_Fatalf_Call {
	return &MockLogger_Fatalf_Call{Call: _e.mock.On("Fatalf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Fatalf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Fatalf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Fatalf_Call) Return() *MockLogger_Fatalf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Fatalf_Call) RunAndReturn(run func(format string, args ...interface{})) *MockLogger_Fatalf_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(msg string, fields ...map[string]interface{}) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - fields ...map[string]interface{}
func (_e *MockLogger_Expecter) Info(msg interface{}, fields ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(msg string, fields ...map[string]interface{})) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []map[string]interface{}
		var variadicArgs []map[string]interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]map[string]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(msg string, fields ...map[string]interface{})) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Infof provides a mock function for the type MockLogger
func (_mock *MockLogger) Infof(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Infof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Infof'
type MockLogger_Infof_Call struct {
	*mock.Call
}

// Infof is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Infof(format interface{}, args ...interface{}) *MockLogger_Infof_Call {
	return &MockLogger_Infof_Call{Call: _e.mock.On("Infof",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Infof_Call) Run(run func(format string, args ...interface{})) *MockLogger_Infof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Infof_Call) Return() *MockLogger_Infof_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Infof_Call) RunAndReturn(run func(format string, args ...interface{})) *MockLogger_Infof_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockLogger
func (_mock *MockLogger) Warn(msg string, fields ...map[string]interface{}) {
	if len(fields) > 0 {
		_mock.Called(msg, fields)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - fields ...map[string]interface{}
func (_e *MockLogger_Expecter) Warn(msg interface{}, fields ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, fields...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(msg string, fields ...map[string]interface{})) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []map[string]interface{}
		var variadicArgs []map[string]interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]map[string]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(msg string, fields ...map[string]interface{})) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}

// Warnf provides a mock function for the type MockLogger
func (_mock *MockLogger) Warnf(format string, args ...interface{}) {
	if len(args) > 0 {
		_mock.Called(format, args)
	} else {
		_mock.Called(format)
	}

	return
}

// MockLogger_Warnf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warnf'
type MockLogger_Warnf_Call struct {
	*mock.Call
}

// Warnf is a helper method to define mock.On call
//   - format string
//   - args ...interface{}
func (_e *MockLogger_Expecter) Warnf(format interface{}, args ...interface{}) *MockLogger_Warnf_Call {
	return &MockLogger_Warnf_Call{Call: _e.mock.On("Warnf",
		append([]interface{}{format}, args...)...)}
}

func (_c *MockLogger_Warnf_Call) Run(run func(format string, args ...interface{})) *MockLogger_Warnf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []interface{}
		var variadicArgs []interface{}
		if len(args) > 1 {
			variadicArgs = args[1].([]interface{})
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockLogger_Warnf_Call) Return() *MockLogger_Warnf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warnf_Call) RunAndReturn(run func(format string, args ...interface{})) *MockLogger_Warnf_Call {
	_c.Run(run)
	return _c
}

// WithComponent provides a mock function for the type MockLogger
func (_mock *MockLogger) WithComponent(component string) logger.Logger {
	ret := _mock.Called(component)

	if len(ret) == 0 {
		panic("no return value specified for WithComponent")
	}

	var r0 logger.Logger
	if returnFunc, ok := ret.Get(0).(func(string) logger.Logger); ok {
		r0 = returnFunc(component)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}
	return r0
}

// MockLogger_WithComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithComponent'
type MockLogger_WithComponent_Call struct {
	*mock.Call
}

// WithComponent is a helper method to define mock.On call
//   - component string
func (_e *MockLogger_Expecter) WithComponent(component interface{}) *MockLogger_WithComponent_Call {
	return &MockLogger_WithComponent_Call{Call: _e.mock.On("WithComponent", component)}
}

func (_c *MockLogger_WithComponent_Call) Run(run func(component string)) *MockLogger_WithComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_WithComponent_Call) Return(logger1 logger.Logger) *MockLogger_WithComponent_Call {
	_c.Call.Return(logger1)
	return _c
}

func (_c *MockLogger_WithComponent_Call) RunAndReturn(run func(component string) logger.Logger) *MockLogger_WithComponent_Call {
	_c.Call.Return(run)
	return _c
}

// WithContext provides a mock function for the type MockLogger
func (_mock *MockLogger) WithContext(ctx context.Context) logger.Logger {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 logger.Logger
	if returnFunc, ok := ret.Get(0).(func(context.Context) logger.Logger); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}
	return r0
}

// MockLogger_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type MockLogger_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLogger_Expecter) WithContext(ctx interface{}) *MockLogger_WithContext_Call {
	return &MockLogger_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *MockLogger_WithContext_Call) Run(run func(ctx context.Context)) *MockLogger_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_WithContext_Call) Return(logger1 logger.Logger) *MockLogger_WithContext_Call {
	_c.Call.Return(logger1)
	return _c
}

func (_c *MockLogger_WithContext_Call) RunAndReturn(run func(ctx context.Context) logger.Logger) *MockLogger_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WithFields provides a mock function for the type MockLogger
func (_mock *MockLogger) WithFields(fields map[string]interface{}) logger.Logger {
	ret := _mock.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 logger.Logger
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) logger.Logger); ok {
		r0 = returnFunc(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}
	return r0
}

// MockLogger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type MockLogger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - fields map[string]interface{}
func (_e *MockLogger_Expecter) WithFields(fields interface{}) *MockLogger_WithFields_Call {
	return &MockLogger_WithFields_Call{Call: _e.mock.On("WithFields", fields)}
}

func (_c *MockLogger_WithFields_Call) Run(run func(fields map[string]interface{})) *MockLogger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLogger_WithFields_Call) Return(logger1 logger.Logger) *MockLogger_WithFields_Call {
	_c.Call.Return(logger1)
	return _c
}

func (_c *MockLogger_WithFields_Call) RunAndReturn(run func(fields map[string]interface{}) logger.Logger) *MockLogger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}
