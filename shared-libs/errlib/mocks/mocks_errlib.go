// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package errlib

import (
	"errlib"
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockIErrorHandler creates a new instance of MockIErrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIErrorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIErrorHandler {
	mock := &MockIErrorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIErrorHandler is an autogenerated mock type for the IErrorHandler type
type MockIErrorHandler struct {
	mock.Mock
}

type MockIErrorHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIErrorHandler) EXPECT() *MockIErrorHandler_Expecter {
	return &MockIErrorHandler_Expecter{mock: &_m.Mock}
}

// HandleAndSendErrorResponse provides a mock function for the type MockIErrorHandler
func (_mock *MockIErrorHandler) HandleAndSendErrorResponse(w http.ResponseWriter, r *http.Request, err error) {
	_mock.Called(w, r, err)
	return
}

// MockIErrorHandler_HandleAndSendErrorResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleAndSendErrorResponse'
type MockIErrorHandler_HandleAndSendErrorResponse_Call struct {
	*mock.Call
}

// HandleAndSendErrorResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - err error
func (_e *MockIErrorHandler_Expecter) HandleAndSendErrorResponse(w interface{}, r interface{}, err interface{}) *MockIErrorHandler_HandleAndSendErrorResponse_Call {
	return &MockIErrorHandler_HandleAndSendErrorResponse_Call{Call: _e.mock.On("HandleAndSendErrorResponse", w, r, err)}
}

func (_c *MockIErrorHandler_HandleAndSendErrorResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request, err error)) *MockIErrorHandler_HandleAndSendErrorResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockIErrorHandler_HandleAndSendErrorResponse_Call) Return() *MockIErrorHandler_HandleAndSendErrorResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIErrorHandler_HandleAndSendErrorResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, err error)) *MockIErrorHandler_HandleAndSendErrorResponse_Call {
	_c.Run(run)
	return _c
}

// HandleError provides a mock function for the type MockIErrorHandler
func (_mock *MockIErrorHandler) HandleError(r *http.Request, err error) errlib.ErrorResponse {
	ret := _mock.Called(r, err)

	if len(ret) == 0 {
		panic("no return value specified for HandleError")
	}

	var r0 errlib.ErrorResponse
	if returnFunc, ok := ret.Get(0).(func(*http.Request, error) errlib.ErrorResponse); ok {
		r0 = returnFunc(r, err)
	} else {
		r0 = ret.Get(0).(errlib.ErrorResponse)
	}
	return r0
}

// MockIErrorHandler_HandleError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleError'
type MockIErrorHandler_HandleError_Call struct {
	*mock.Call
}

// HandleError is a helper method to define mock.On call
//   - r *http.Request
//   - err error
func (_e *MockIErrorHandler_Expecter) HandleError(r interface{}, err interface{}) *MockIErrorHandler_HandleError_Call {
	return &MockIErrorHandler_HandleError_Call{Call: _e.mock.On("HandleError", r, err)}
}

func (_c *MockIErrorHandler_HandleError_Call) Run(run func(r *http.Request, err error)) *MockIErrorHandler_HandleError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *http.Request
		if args[0] != nil {
			arg0 = args[0].(*http.Request)
		}
		var arg1 error
		if args[1] != nil {
			arg1 = args[1].(error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockIErrorHandler_HandleError_Call) Return(errorResponse errlib.ErrorResponse) *MockIErrorHandler_HandleError_Call {
	_c.Call.Return(errorResponse)
	return _c
}

func (_c *MockIErrorHandler_HandleError_Call) RunAndReturn(run func(r *http.Request, err error) errlib.ErrorResponse) *MockIErrorHandler_HandleError_Call {
	_c.Call.Return(run)
	return _c
}
